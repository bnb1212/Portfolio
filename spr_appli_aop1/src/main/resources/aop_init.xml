<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 핵심 로직 : AOP 입장에서는 target class -->
	<bean id="mimpl" class="pack.MessageImpl">
		<property name="name" value="신기해" />
	</bean>

	<!-- Advice(Aspect)로 target 클래스에 weaving -->
	<bean id="loggingAdvice" class="other.LoggingAdvice" />
	
	<!-- proxy를 통한 간접 접근 -->			<!-- ProxyFa 적고 컨트롤+space -->
	<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref bean="mimpl" />
		</property>
		<property name="interceptorNames">
			<list>
				<value>hiAdvisor</value>
			</list>
		</property>
	</bean>
	
	<!-- Advisor(Advice + pointcut) -->			<!-- Defaultpont 적고 컨트롤+space -->
	<bean id="hiAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<!-- advice -->
		<property name="advice">
			<ref bean="loggingAdvice"/>
		</property>
		<!-- pointcut -->
		<property name="pointcut">
											<!-- 정규표현식 : JDKReg적고 컨트롤+space  -->
			<bean class="org.springframework.aop.support.JdkRegexpMethodPointcut">
				<property name="pattern">
					<!-- . 은 패키지에 상관없이, *은 모든 값을 뜻한다. -->
		<!-- 즉, pack에 상관없이(양 옆 .) 리턴값 상관없는 (앞 *) sayHi라는 이름으로 시작(뒤 *)하는 메소드를 찾음 -->
					<value>.*sayHi*.</value> 
				</property>
			</bean>
		</property>
	</bean>
	
</beans>
